diff --git a/CMakeLists.txt b/CMakeLists.txt
index b757b70..ccd5abc 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -6,6 +6,21 @@ IF(NOT CMAKE_BUILD_TYPE)
   SET(CMAKE_BUILD_TYPE "RELEASE")
 ENDIF()
 
+# Cross compile
+IF(TOOLCHAIN_PREFIX)
+    SET(CMAKE_C_COMPILER   "${TOOLCHAIN_PREFIX}-gcc")
+    SET(CMAKE_CXX_COMPILER "${TOOLCHAIN_PREFIX}-g++")
+    SET(CMAKE_AS           "${TOOLCHAIN_PREFIX}-as")
+    SET(CMAKE_AR           "${TOOLCHAIN_PREFIX}-ar")
+    SET(CMAKE_NM           "${TOOLCHAIN_PREFIX}-nm")
+    SET(CMAKE_RANLIB       "${TOOLCHAIN_PREFIX}-ranlib")
+    SET(CMAKE_LD           "${TOOLCHAIN_PREFIX}-ld")
+    SET(CMAKE_STRIP        "${TOOLCHAIN_PREFIX}-strip")
+
+    SET(CMAKE_C_COMPILER_WORKS 1)
+    SET(CMAKE_CXX_COMPILER_WORKS 1)
+ENDIF()
+
 find_program(CCACHE_PROGRAM ccache)
 if(CCACHE_PROGRAM)
     set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${CCACHE_PROGRAM}")
@@ -16,29 +31,19 @@ project(chiapos C CXX ASM)
 # CMake 3.14+
 include(FetchContent)
 
-if (${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD")
-include(${CMAKE_INSTALL_PREFIX}/share/cmake/pybind11/pybind11Config.cmake)
-else()
+IF (EXISTS "${FETCHCONTENT_CACHE_DIR}/gulrak_filesystem-1.5.6.tar.gz")
 FetchContent_Declare(
-  pybind11-src
-  GIT_REPOSITORY https://github.com/pybind/pybind11.git
-  GIT_TAG        v2.7.1
-)
-FetchContent_MakeAvailable(pybind11-src)
-endif()
-
-FetchContent_Declare(
-  cxxopts
-  GIT_REPOSITORY https://github.com/jarro2783/cxxopts.git
-  GIT_TAG        v2.2.1
+  gulrak
+  URL "${FETCHCONTENT_CACHE_DIR}/gulrak_filesystem-1.5.6.tar.gz"
+  URL_HASH SHA256=16358d68f7fb1024380bc4619873b8003a5cdaa8700a0bc88ac3c6e96cbc6d48
 )
-FetchContent_MakeAvailable(cxxopts)
-
+ELSE()
 FetchContent_Declare(
   gulrak
   GIT_REPOSITORY https://github.com/gulrak/filesystem.git
   GIT_TAG        v1.5.6
 )
+ENDIF()
 FetchContent_MakeAvailable(gulrak)
 
 set(FSE_LIB ${CMAKE_CURRENT_SOURCE_DIR}/lib/FiniteStateEntropy/lib)
@@ -55,12 +60,12 @@ include_directories(
   ${cxxopts_SOURCE_DIR}/include
   ${gulrak_SOURCE_DIR}/include/ghc
   ${CMAKE_CURRENT_SOURCE_DIR}/../lib/FiniteStateEntropy/lib
+  ${CMAKE_CURRENT_SOURCE_DIR}/include
   ${CMAKE_CURRENT_SOURCE_DIR}/src
   ${CMAKE_CURRENT_SOURCE_DIR}/test
+  ${CMAKE_CURRENT_SOURCE_DIR}/uint128_t
   )
 
-add_library(fse ${FSE_FILES})
-
 IF (MSVC)
 IF (CMAKE_BUILD_TYPE STREQUAL "RELEASE")
 set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /O2 /Oy")
@@ -108,83 +113,24 @@ execute_process(
     OUTPUT_STRIP_TRAILING_WHITESPACE)
 ENDIF()
 
-IF (WIN32)
 set(BLAKE3_SRC
     src/b3/blake3.c
     src/b3/blake3_portable.c
     src/b3/blake3_dispatch.c
-    src/b3/blake3_avx2.c
-    src/b3/blake3_avx512.c
-    src/b3/blake3_sse41.c
 )
-ELSEIF(OSX_NATIVE_ARCHITECTURE STREQUAL "arm64")
-set(BLAKE3_SRC
-    src/b3/blake3.c
-    src/b3/blake3_portable.c
-    src/b3/blake3_dispatch.c
-)
-ELSE()
-set(BLAKE3_SRC
-    src/b3/blake3.c
-    src/b3/blake3_portable.c
-    src/b3/blake3_dispatch.c
-    src/b3/blake3_avx2_x86-64_unix.S
-    src/b3/blake3_avx512_x86-64_unix.S
-    src/b3/blake3_sse41_x86-64_unix.S
-)
-ENDIF()
+ADD_DEFINITIONS(-DBLAKE3_NO_AVX512 -DBLAKE3_NO_AVX2 -DBLAKE3_NO_SSE41)
 
-pybind11_add_module(chiapos ${CMAKE_CURRENT_SOURCE_DIR}/python-bindings/chiapos.cpp src/chacha8.c ${BLAKE3_SRC})
-
-add_executable(ProofOfSpace
-    src/cli.cpp
-    src/chacha8.c
+add_library(chiapos STATIC
     ${BLAKE3_SRC}
-)
-
-option(BUILD_PROOF_OF_SPACE_STATICALLY "Build ProofOfSpace target statically" OFF)
-IF (BUILD_PROOF_OF_SPACE_STATICALLY)
-  message("Statically build ProofOfSpace")
-  target_link_libraries(ProofOfSpace -static -Wl,--whole-archive -lrt -lpthread -Wl,--no-whole-archive)
-ENDIF()
-
-add_executable(RunTests
-    tests/test-main.cpp
-    tests/test.cpp
+    ${FSE_FILES}
+    src/api.cpp
     src/chacha8.c
-    ${BLAKE3_SRC}
+    uint128_t/uint128_t.cpp
 )
-
-find_package(Threads REQUIRED)
-
-add_library(uint128 STATIC uint128_t/uint128_t.cpp)
-target_include_directories(uint128 PUBLIC uint128_t)
-
-target_compile_features(fse PUBLIC cxx_std_17)
 target_compile_features(chiapos PUBLIC cxx_std_17)
-target_compile_features(RunTests PUBLIC cxx_std_17)
-
-if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
-  target_link_libraries(chiapos PRIVATE fse Threads::Threads)
-  target_link_libraries(ProofOfSpace fse Threads::Threads)
-  target_link_libraries(RunTests fse Threads::Threads)
-elseif (${CMAKE_SYSTEM_NAME} MATCHES "OpenBSD")
-  target_link_libraries(chiapos PRIVATE fse Threads::Threads)
-  target_link_libraries(ProofOfSpace fse Threads::Threads)
-  target_link_libraries(RunTests fse Threads::Threads)
-elseif (${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD")
-  target_link_libraries(chiapos PRIVATE fse Threads::Threads)
-  target_link_libraries(ProofOfSpace fse Threads::Threads)
-  target_link_libraries(RunTests fse Threads::Threads)
-elseif (MSVC)
-  target_link_libraries(chiapos PRIVATE fse Threads::Threads uint128)
-  target_link_libraries(ProofOfSpace fse Threads::Threads uint128)
-  target_link_libraries(RunTests fse Threads::Threads uint128)
-else()
-  target_link_libraries(chiapos PRIVATE fse stdc++fs Threads::Threads)
-  target_link_libraries(ProofOfSpace fse stdc++fs Threads::Threads)
-  target_link_libraries(RunTests fse stdc++fs Threads::Threads)
-endif()
 
-enable_testing()
-add_test(NAME RunTests COMMAND RunTests)
+install(TARGETS chiapos EXPORT chiapos DESTINATION lib)
+install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/
+    DESTINATION include/chiapos
+    FILES_MATCHING PATTERN "*.h"
+)
